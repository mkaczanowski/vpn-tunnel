#cloud-config

hostname: $hostname
write_files:
  - path: "/etc/resolv.conf"
    permissions: "0644"
    owner: "root"
    content: |
        nameserver 8.8.8.8
        nameserver 8.8.4.4
  - path: "/root/dyndns-update"
    permissions: "0755"
    owner: "root"
    content: |
        #!/bin/bash
        USERNAME="$no_ip_username"
        HOSTNAME="$no_ip_hostname"
        allowed_srcs=( $no_ip_allowed_sources )
        
        /usr/bin/curl -u $USERNAME "http://dynupdate.no-ip.com/nic/update?hostname=$HOSTNAME"
        /usr/bin/systemctl start iptables-restore.service
        iptables -F DYNAMIC
        for src in "${allowed_srcs[@]}"; do
            iptables -A DYNAMIC --src $src -j ACCEPT
        done
        iptables -A DYNAMIC -i docker0 -j ACCEPT
        iptables -A DYNAMIC -j DROP
  - path: "/var/lib/iptables/rules-save"
    permissions: "0644"
    owner: "root"
    content: |
        *filter
        :INPUT DROP [0:0]
        :FORWARD DROP [0:0]
        :OUTPUT ACCEPT [0:0]
        :DYNAMIC -
        # BASE
        -A INPUT -p icmp -j ACCEPT
        -A INPUT -i lo -j ACCEPT
        # ALLOW ALL RELATED | ESTABLISHED
        -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
        # SSH
        -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
        # VPN
        -A INPUT -m state --state NEW -p udp --dport 1194 -j ACCEPT
        # SERVICES
        -A INPUT -p tcp -m tcp --dport 80 -j DYNAMIC
        -A INPUT -p tcp -m tcp --dport 443 -j DYNAMIC
        -A INPUT -p udp --dport 53 -j DYNAMIC
        # LAST: REJECT
        -A INPUT -j REJECT --reject-with icmp-host-prohibited
        
        # DOCKER
        -A FORWARD -i docker0 -o eth0 -j ACCEPT
        -A FORWARD -i eth0 -o docker0 -j ACCEPT
        
        # DYNAMIC SHOULD BE APPENDED BY dyndns_update
        COMMIT
        
        *nat
        :PREROUTING ACCEPT [0:0]]
        :POSTROUTING ACCEPT [0:0]
        :OUTPUT ACCEPT [0:0]
        -A POSTROUTING -o eth0 -s 172.17.0.1/16 -j MASQUERADE
        COMMIT
  - path: "/root/configs/sniproxy.conf"
    permissions: "0644"
    owner: "root"
    content: |
        user daemon
        pidfile /var/tmp/sniproxy.pid
        listener 80 {
            proto http
        }
        listener 443 {
            proto tls
        }
        table {
            .* *
        }
        resolver {
            nameserver 8.8.8.8
            mode ipv4_first
        }
  - path: "/root/configs/db.override"
    permissions: "0644"
    owner: "root"
    content: |
        $TTL  86400
        
        @   IN  SOA ns1 root (
                    2017011501  ; serial
                    604800      ; refresh 1w
                    86400       ; retry 1d
                    2419200     ; expiry 4w
                    86400       ; minimum TTL 1d
                    )
        
            IN  NS  ns1
        ns1 IN  A   $public_ipv4
        @   IN  A   $public_ipv4
        *   IN  A   $public_ipv4
  - path: "/root/configs/named.recursion.conf"
    permissions: "0644"
    owner: "root"
    content: |
        allow-recursion { trusted; };
        recursion yes;
        additional-from-auth yes;
        additional-from-cache yes;
  - path: "/root/configs/zones.override"
    permissions: "0644"
    owner: "root"
    content: |
        zone "." {
            type master;
            file "/data/conf/db.override";
        };

        zone "netflix.com." {
            type master;
            file "/data/conf/db.override";
        };
        
        zone "netflix.net." {
            type master;
            file "/data/conf/db.override";
        };
        
        zone "nflxvideo.net." {
            type master;
            file "/data/conf/db.override";
        };
        
        zone "crackle.com." {
            type master;
            file "/data/conf/db.override";
        };
  - path: "/root/configs/openvpn/openvpn.conf"
    permissions: "0644"
    owner: "root"
    content: |
        server 192.168.255.0 255.255.255.0
        verb 3
        key /etc/openvpn/pki/private/vultr-openvpn.key
        ca /etc/openvpn/pki/ca.crt
        cert /etc/openvpn/pki/issued/vultr-openvpn.crt
        dh /etc/openvpn/pki/dh.pem
        tls-auth /etc/openvpn/pki/ta.key
        key-direction 0
        keepalive 10 60
        persist-key
        persist-tun
        
        proto udp
        # Rely on Docker to do port mapping, internally always 1194
        port 1194
        dev tun0
        status /tmp/openvpn-status.log
        
        user nobody
        group nogroup
        
        ### Route Configurations Below
        route 192.168.254.0 255.255.255.0
        
        ### Push Configurations Below
        push block-outside-dns
        push dhcp-option DNS $public_ipv4
  - path: "/root/configs/openvpn/ovpn_env.sh"
    permissions: "0644"
    owner: "root"
    content: |
        declare -x OVPN_AUTH=""
        declare -x OVPN_CIPHER=""
        declare -x OVPN_CLIENT_TO_CLIENT
        declare -x OVPN_CN="$public_ipv4"
        declare -x OVPN_COMP_LZO
        declare -x OVPN_DEFROUTE="1"
        declare -x OVPN_DEVICE="tun"
        declare -x OVPN_DNS="1"
        declare -x OVPN_ENV="/etc/openvpn/ovpn_env.sh"
        declare -x OVPN_FRAGMENT
        declare -x OVPN_MTU
        declare -x OVPN_NAT="0"
        declare -x OVPN_OTP_AUTH
        declare -x OVPN_PORT="1194"
        declare -x OVPN_PROTO="udp"
        declare -x OVPN_PUSH
        declare -x OVPN_ROUTES
        declare -x OVPN_SERVER="192.168.255.0/24"
        declare -x OVPN_SERVER_URL="udp://$public_ipv4:1194"
        declare -x OVPN_TLS_CIPHER=""
coreos:
    units:
      - name: "docker.service"
        command: "start"
        drop-ins:
          - name: "50-disable-iptables.conf"
            content: |
              [Service]
              Environment=DOCKER_OPTS='--iptables=false'
      - name: "iptables-restore.service"
        enable: true
        command: "start"
      - name: "sniproxy.service"
        enable: true
        command: "start"
        content: |
          [Unit]
          Description=SNI Proxy
          After=docker.service
          Requires=docker.service
          
          [Service]
          TimeoutStartSec=0
          ExecStartPre=-/usr/bin/docker kill sniproxy
          ExecStartPre=-/usr/bin/docker rm sniproxy
          ExecStartPre=/usr/bin/docker pull ab77/sniproxy
          ExecStart=/usr/bin/docker run --rm --name sniproxy -p $public_ipv4:80:80/tcp -p $public_ipv4:443:443/tcp -v /root/configs:/data/conf ab77/sniproxy:latest
          ExecStop=/usr/bin/docker stop sniproxy
          
          [X-Fleet]
          Conflicts=sniproxy@*.service

          [Install]
          WantedBy=multi-user.target
      - name: "bind.service"
        enable: true
        command: "start"
        content: |
          [Unit]
          Description=SNI Proxy
          After=docker.service
          Requires=docker.service
          
          [Service]
          TimeoutStartSec=0
          ExecStartPre=-/usr/bin/docker kill bind
          ExecStartPre=-/usr/bin/docker rm bind
          ExecStartPre=/usr/bin/docker pull ab77/bind
          ExecStart=/usr/bin/docker run --rm --name bind -p $public_ipv4:53:53/udp -v /root/configs:/data/conf ab77/bind:latest
          ExecStop=/usr/bin/docker stop bind
          
          [X-Fleet]
          Conflicts=bind@*.service

          [Install]
          WantedBy=multi-user.target
      - name: "openvpn.service"
        enable: true
        command: "start"
        content: |
          [Unit]
          Description=OpenVPN Server
          After=docker.service
          Requires=docker.service
          
          [Service]
          TimeoutStartSec=0
          ExecStartPre=-/usr/bin/docker kill openvpn
          ExecStartPre=-/usr/bin/docker rm openvpn
          ExecStartPre=/usr/bin/docker pull kylemanna/openvpn
          ExecStart=/usr/bin/docker run --name openvpn -v /root/configs/openvpn:/etc/openvpn --rm -p $public_ipv4:1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
          ExecStop=/usr/bin/docker stop openvpn
          
          [X-Fleet]
          Conflicts=openvpn@*.service

          [Install]
          WantedBy=multi-user.target
      - name: "dyndns-update.service"
        enable: true
        command: "start"
        content: |
          [Unit]
          Description=Updates DynDns access list
          
          [Service]
          Type=oneshot
          ExecStart=/root/dyndns-update
      - name: "dyndns-update.timer"
        enable: true
        command: "start"
        content: |
          [Unit]
          Description=Update dyn-dns every 1 min
          
          [Timer]
          OnCalendar=*:0/5

          [Install]
          WantedBy=multi-user.target
